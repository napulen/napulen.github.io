[{"authors":null,"categories":null,"content":"I am interested in all of the ways in which modern technologies can help us to learn, understand, create, and enjoy music.\n Download my resumé. -- ","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1643259933,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am interested in all of the ways in which modern technologies can help us to learn, understand, create, and enjoy music.\n Download my resumé. -- ","tags":null,"title":"Néstor Nápoles López","type":"authors"},{"authors":null,"categories":null,"content":"   Table of Contents  What you will learn Program overview Courses in this program Meet your instructor FAQs    What you will learn  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas  Program overview The demand for skilled data science practitioners is rapidly growing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi.\nCourses in this program  Python basics Build a foundation in Python.   Visualization Learn how to visualize data with Plotly.   Statistics Introduction to statistics for data science.   Meet your instructor Néstor Nápoles López FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1643259933,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"/courses/example/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"An example of using Wowchemy's Book layout for publishing online courses.","tags":null,"title":"📊 Learn Data Science","type":"book"},{"authors":null,"categories":null,"content":"   Table of Contents  List of projects    A sample of projects and reports that I have made for courses at McGill University.\nList of projects  MUMT 501: Barberpole Phasing and Flanging Illusions One of the barberpole phasing and flanging illusions described in Equeda et al. (2015).   MUMT 615: Melodic Tension Experiment An experiment on melodic tension, implemented with jsPsych.   MUMT 616: Inharmonicity Inharmonicity in the context of plucked strings.   MUMT 618: Implementation of Boss DS-1 MATLAB implementation of a digital model of distortion by Yeh et al. (2007).   MUMT 620: Cadence Game A musical game mechanic where players compete to complete a \u0026ldquo;cadence\u0026rdquo;.   MUMT 621: Hidden Markov Model for Symbolic Key Detection A Hidden Markov Model (HMM) for retrieving the musical key of a MIDI file.   MUTH 251: Essay on Brahms Intermezzo Op.118 No.2 A short music-theoretical essay on Brahms Intermezzo Op.118 No.2   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1643259933,"objectID":"86fc38c51fdd6f94410249211363b1a3","permalink":"/reports/mcgill/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/reports/mcgill/","section":"reports","summary":"A sample of projects and reports that I have made for courses at McGill University.","tags":null,"title":"McGill Coursework","type":"book"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"10274f6cc55aa489e9011fc6502b0898","permalink":"/project/augmentednet/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/augmentednet/","section":"project","summary":"A Roman numeral analysis CRNN.","tags":["Code"],"title":"AugmentedNet","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"9125de8262fa95f04e202ce84d6a12c1","permalink":"/project/harmalysis/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/harmalysis/","section":"project","summary":"An interpreter of Roman numeral analysis.","tags":["Code"],"title":"harmalysis","type":"project"},{"authors":null,"categories":null,"content":"Build a foundation in Python.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz What is the difference between lists and tuples? Lists\n Lists are mutable - they can be changed Slower than tuples Syntax: a_list = [1, 2.0, 'Hello world']  Tuples\n Tuples are immutable - they can\u0026rsquo;t be changed Tuples are faster than lists Syntax: a_tuple = (1, 2.0, 'Hello world')   Is Python case-sensitive? Yes\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"17a31b92253d299002593b7491eedeea","permalink":"/courses/example/python/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/python/","section":"courses","summary":"Build a foundation in Python.\n","tags":null,"title":"Python basics","type":"book"},{"authors":null,"categories":null,"content":"Learn how to visualize data with Plotly.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz When is a heatmap useful? Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Write Plotly code to render a bar chart import plotly.express as px data_canada = px.data.gapminder().query(\u0026quot;country == 'Canada'\u0026quot;) fig = px.bar(data_canada, x='year', y='pop') fig.show()  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"1b341b3479c8c6b1f807553b77e21b7c","permalink":"/courses/example/visualization/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/visualization/","section":"courses","summary":"Learn how to visualize data with Plotly.\n","tags":null,"title":"Visualization","type":"book"},{"authors":null,"categories":null,"content":"Introduction to statistics for data science.\n  1-2 hours per week, for 8 weeks\nLearn The general form of the normal probability density function is:\n$$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi} } e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$\n The parameter $\\mu$ is the mean or expectation of the distribution. $\\sigma$ is its standard deviation. The variance of the distribution is $\\sigma^{2}$.   Quiz What is the parameter $\\mu$? The parameter $\\mu$ is the mean or expectation of the distribution.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"6f4078728d71b1b791d39f218bf2bdb1","permalink":"/courses/example/stats/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/stats/","section":"courses","summary":"Introduction to statistics for data science.\n","tags":null,"title":"Statistics","type":"book"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"852186619dca7e6a009dc8a93ab68cbc","permalink":"/project/justkeydding/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/justkeydding/","section":"project","summary":"A local and global key-estimation algorithm for MIDI, MusicXML, and Audio sources.","tags":["Code"],"title":"justkeydding","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"09db68432cb1417fbe94cf0d952aa11a","permalink":"/project/romanyh/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/romanyh/","section":"project","summary":"A voice-leading algorithm.","tags":["Code"],"title":"romanyh","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"c3fadc73af7fd0f007749d0ee949ffdd","permalink":"/project/beethovenscores/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/beethovenscores/","section":"project","summary":"A comparison of two transcriptions of the piano sonatas by Beethoven.","tags":["Data"],"title":"Beethoven Piano Sonatas","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"05c70c69fc1f89499aa327363d645005","permalink":"/project/haydnsun/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/haydnsun/","section":"project","summary":"Roman numeral analyses of the six string quartets Op.20 by Haydn.","tags":["Data"],"title":"Haydn \"Sun\" String Quartets","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"eaa39fc37853629f0330ead9f7ab7bb5","permalink":"/project/minibach/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/minibach/","section":"project","summary":"An implementation of the MiniBach model presented in Deep Learning Techniques for Music Generation.","tags":["Code"],"title":"MiniBach","type":"project"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Néstor Nápoles López","Mark Gotham","Ichiro Fujinaga"],"categories":null,"content":"","date":1636329600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"f88ba1b51f8ef6e7770019bfc3719cd0","permalink":"/publication/augmentednet_mml/","publishdate":"2021-12-15T00:00:00Z","relpermalink":"/publication/augmentednet_mml/","section":"publication","summary":"A new CRNN for automatic Roman numeral analysis.","tags":null,"title":"AugmentedNet: A Convolutional Recurrent Neural Network for Automatic Roman Numeral Analysis with Improved Data Augmentation","type":"publication"},{"authors":["Néstor Nápoles López","Mark Gotham","Ichiro Fujinaga"],"categories":null,"content":"Watch the ISMIR video  ","date":1636329600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"6e02599c3b2280946996e8abd7778337","permalink":"/publication/augmentednet/","publishdate":"2021-08-05T00:00:00Z","relpermalink":"/publication/augmentednet/","section":"publication","summary":"A new CRNN for automatic Roman numeral analysis.","tags":null,"title":"AugmentedNet: A Roman Numeral Analysis Network with Synthetic Training Examples and Additional Tonal Tasks","type":"publication"},{"authors":["Néstor Nápoles López"],"categories":[],"content":"It is common to find progressions where the same roman numeral repeats itself:\n   I think in these cases, a common procedure for good voice leading is to prefer a change of the voicing (e.g., change of position in the three upper voices), penalizing the algorithm for proposing the exact same voicing twice.\nI wanted to make sure that the policy coincides with the practice in existing music.\nI looked for repeated harmonies like these in 69 annotated Bach Chorales and found 192 instances.\nThe analyzed Bach chorales are located in the KernScores website.\nThey can be visualized interactively in the Verovio Humdrum Viewer.\nThey can also be scraped with a single query to the Kern Scores server: https://kern.humdrum.org/data?l=BachChoralesAnalyzed\nI used the last approach to collect the data for this experiment. The code can found in this Jupyter Notebook.\nOut of the 192 instances found:\n In 78% of them, the voicing changes In 22% of them, the voicing remains the same  Here are a few of the instances I found. Red means different voicing and green means same voicing.\n   For completeness, here is the full table. Offsets are given in quarter notes from the beginning of the score (starting from 0.0). In all instances, chord1 and chord2 are contiguous and annotated by a human expert:\n   file chord1_offset chord1_notes chord2_offset chord2_notes same_voicing?     chor315.krn         5.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 8.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] True   chor001.krn         0.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 1.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    19.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 21.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False    21.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 22.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] True    24.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 25.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] True    30.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 31.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor024.krn         0.0 [\u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 1.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False    6.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 7.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D2\u0026rsquo;] False    7.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D2\u0026rsquo;] 8.0 [\u0026lsquo;F#5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;] False    13.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 16.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True    16.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 17.0 [\u0026lsquo;F#5\u0026rsquo;, \u0026lsquo;D5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;] False   chor050.krn         7.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 8.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] True    9.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 10.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False    33.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 34.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] True   chor323.krn         31.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F2\u0026rsquo;] 33.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F2\u0026rsquo;] True   chor176.krn         0.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F2\u0026rsquo;] 1.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] False    16.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 17.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;] False    19.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 20.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    25.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 26.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    34.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 36.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False   chor200.krn         12.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 14.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    28.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 29.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] True    48.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 50.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;] False   chor311.krn         7.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 8.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] True   chor019.krn         0.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 1.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] True    7.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 8.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True    16.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 17.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] True    23.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 24.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False    27.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 28.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True    33.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 34.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D2\u0026rsquo;] False    35.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 35.5 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False   chor136.krn         0.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 1.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False   chor303.krn         13.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F2\u0026rsquo;] 16.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] False   chor248.krn         9.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 10.0 [\u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False   chor028.krn         6.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 8.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] False    8.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 9.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False    22.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 24.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False   chor101.krn         13.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 16.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] True    16.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 17.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;] False   chor255.krn         1.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 2.0 [\u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False    3.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;] 4.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;] False    5.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 8.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False    9.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 10.0 [\u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False    13.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 14.0 [\u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False    31.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 32.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] True    33.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 34.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True    41.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 42.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] True    59.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 60.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False   chor110.krn         7.0 [\u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E-3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 8.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;] False   chor153.krn         4.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 5.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False    6.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;, \u0026lsquo;D2\u0026rsquo;] 7.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;, \u0026lsquo;D2\u0026rsquo;] True    7.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;, \u0026lsquo;D2\u0026rsquo;] 8.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False    8.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 9.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True    16.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 17.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] True    22.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 23.0 [\u0026lsquo;A2\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    30.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 31.0 [\u0026lsquo;B3\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;, \u0026lsquo;B4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;] False    32.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 33.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True   chor336.krn        chor224.krn         0.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 1.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] False    7.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 8.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] False    8.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 9.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] False   chor164.krn        chor191.krn         0.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 1.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    13.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 16.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    31.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 32.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False   chor040.krn         19.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 20.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] True   chor361.krn         16.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 17.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;] False   chor213.krn         10.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F2\u0026rsquo;] 12.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] False   chor282.krn         14.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 16.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;] False    32.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;] 33.0 [\u0026lsquo;G5\u0026rsquo;, \u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False   chor345.krn         7.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 8.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False    13.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 16.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    22.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 23.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] True    23.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 24.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    33.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 34.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False   chor067.krn         14.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 16.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False    24.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 25.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False    32.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 33.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False    40.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;E2\u0026rsquo;] 42.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor366.krn         7.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 8.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    9.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;] 10.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#3\u0026rsquo;] False    15.0 [\u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 16.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False    27.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 28.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    43.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;C#3\u0026rsquo;] 44.0 [\u0026lsquo;E3\u0026rsquo;, \u0026lsquo;E5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#3\u0026rsquo;] False   chor268.krn         7.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 8.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] True    8.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 9.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;] False    15.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 16.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] True    23.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 24.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    29.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 30.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    39.0 [\u0026lsquo;F5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 40.0 [\u0026lsquo;F5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;] False    57.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 58.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] True   chor354.krn         9.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 10.0 [\u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False   chor276.krn         3.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 4.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False    13.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 16.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False   chor339.krn         23.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;C5\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 24.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    27.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 28.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False   chor299.krn         4.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;A-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;] 5.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;A-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] False    10.0 [\u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 11.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;E-3\u0026rsquo;] False    14.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 15.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F2\u0026rsquo;] False    34.0 [\u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E-3\u0026rsquo;] 36.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;] False    41.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 41.5 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False   chor048.krn         2.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 3.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False    3.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 4.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    6.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;] 7.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    7.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 8.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;] False    14.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 16.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    22.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 23.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False    30.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 31.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    38.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 39.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False   chor306.krn         4.0 [\u0026lsquo;D4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 5.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    7.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 8.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    12.0 [\u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 13.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    23.0 [\u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E-2\u0026rsquo;] 24.0 [\u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E-2\u0026rsquo;] False    40.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;E-3\u0026rsquo;] 41.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;E-3\u0026rsquo;] False    55.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 56.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;] False   chor281.krn         0.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 1.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    31.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 32.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;] False   chor273.krn         15.0 [\u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 16.0 [\u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False   chor305.krn         30.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 32.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True    34.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 35.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] True   chor158.krn         15.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 16.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    57.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 58.0 [\u0026lsquo;C3\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor054.krn        chor098.krn         11.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;] 12.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A#3\u0026rsquo;, \u0026lsquo;F#2\u0026rsquo;] False    13.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 16.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;B4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False    22.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] 23.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False    23.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 24.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False   chor368.krn         24.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 27.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    45.0 [\u0026lsquo;G5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 46.0 [\u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False    49.0 [\u0026lsquo;F3\u0026rsquo;, \u0026lsquo;D5\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 50.0 [\u0026lsquo;B-2\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;] False    51.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 52.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False   chor009.krn         16.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 17.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;] False   chor069.krn         19.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 20.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    24.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;] 25.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;] True    35.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 36.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D5\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    61.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 62.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False   chor258.krn         33.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B2\u0026rsquo;] 34.0 [\u0026lsquo;B2\u0026rsquo;, \u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False   chor157.krn         15.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F2\u0026rsquo;] 16.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] False   chor223.krn         7.0 [\u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;C2\u0026rsquo;] 8.0 [\u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    41.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C#3\u0026rsquo;] 42.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D#3\u0026rsquo;] False   chor177.krn         0.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 1.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    15.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 16.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False    17.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 20.0 [\u0026lsquo;C#5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False    35.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 36.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor187.krn         13.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 14.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C2\u0026rsquo;] False    15.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 16.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    31.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 31.5 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;] False   chor328.krn         0.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 1.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    16.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 20.0 [\u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] False    26.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 27.0 [\u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False    30.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 31.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False   chor002.krn         7.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E2\u0026rsquo;] 8.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor290.krn         0.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 1.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False    9.0 [\u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 10.0 [\u0026lsquo;E3\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;] False    31.0 [\u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;C#3\u0026rsquo;] 32.0 [\u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;E#4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;] False   chor088.krn         0.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 1.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    13.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 16.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False    21.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 24.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor030.krn         10.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E2\u0026rsquo;] 12.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False    22.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 24.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor201.krn         4.0 [\u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 5.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    7.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 8.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    12.0 [\u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 13.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] False    23.0 [\u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E-2\u0026rsquo;] 24.0 [\u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E-2\u0026rsquo;] False    40.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;E-3\u0026rsquo;] 41.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;E-3\u0026rsquo;] False    55.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 56.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;] False   chor032.krn         0.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 1.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;] False    16.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 17.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor272.krn        chor183.krn         15.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 16.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    31.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 32.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor090.krn         0.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;] 1.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;] True    14.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 15.0 [\u0026lsquo;F5\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] False   chor046.krn         7.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 8.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True    9.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;] 10.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;F#3\u0026rsquo;] False    15.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 16.0 [\u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True   chor217.krn         9.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] 12.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F#4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] True   chor117.krn         3.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;A-4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;A-3\u0026rsquo;] 4.0 [\u0026lsquo;A-3\u0026rsquo;, \u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;C5\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;] False    9.0 [\u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;A-4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 10.0 [\u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;A-4\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] True   chor165.krn         15.0 [\u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F2\u0026rsquo;] 16.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] False    16.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 17.0 [\u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] True   chor057.krn         7.0 [\u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 8.0 [\u0026lsquo;E5\u0026rsquo;, \u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor068.krn        chor230.krn         0.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 1.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False    7.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 8.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] True    23.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 24.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] True    24.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 25.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] True    25.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 26.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;D3\u0026rsquo;] False    33.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 34.0 [\u0026lsquo;D5\u0026rsquo;, \u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;B-3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False   chor124.krn         0.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] 1.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] True    7.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] 8.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;A2\u0026rsquo;] False    9.0 [\u0026lsquo;B4\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;G2\u0026rsquo;] 10.0 [\u0026lsquo;G4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;] False   chor146.krn         7.0 [\u0026lsquo;G#4\u0026rsquo;, \u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] 9.0 [\u0026lsquo;E4\u0026rsquo;, \u0026lsquo;B3\u0026rsquo;, \u0026lsquo;G#3\u0026rsquo;, \u0026lsquo;E3\u0026rsquo;] False   chor350.krn         6.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 7.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;A4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] True    22.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;E-4\u0026rsquo;, \u0026lsquo;G3\u0026rsquo;, \u0026lsquo;C3\u0026rsquo;] 24.0 [\u0026lsquo;E-5\u0026rsquo;, \u0026lsquo;G4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;, \u0026lsquo;C4\u0026rsquo;] False    38.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] 39.0 [\u0026lsquo;C5\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;A3\u0026rsquo;, \u0026lsquo;F3\u0026rsquo;] True    46.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] 47.0 [\u0026lsquo;B-4\u0026rsquo;, \u0026lsquo;F4\u0026rsquo;, \u0026lsquo;D4\u0026rsquo;, \u0026lsquo;B-2\u0026rsquo;] True    This would suggest that, in the context of an automatic voice leading algorithm, if two identical harmonies appear contiguously, they should be voiced differently. For example, by changing the position in the three upper voices and/or changing the octave of the bass.\n","date":1605744e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"927c8c477f3c0f33f5051625874b1a39","permalink":"/post/repeatedharmonies/","publishdate":"2020-11-19T00:00:00Z","relpermalink":"/post/repeatedharmonies/","section":"post","summary":"A brief experiment on 69 chorales to determine whether a voice-leading algorithm should change the voicing when harmonies denoted by the same roman numeral appear contiguously.","tags":[],"title":"Voice leading in repeating harmonies","type":"post"},{"authors":["Jacob deGroot-Maggetti","Timothy R de Reuse","Laurent Feisthauer","Samuel Howes","Yaolong Ju","Suzuka Kokubu","Sylvain Margot","Néstor Nápoles López","Finn Upham"],"categories":null,"content":"","date":1602460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"4182eb576ca58f9f0ef7cf15493abb5a","permalink":"/publication/mendelssohn/","publishdate":"2020-10-12T00:00:00Z","relpermalink":"/publication/mendelssohn/","section":"publication","summary":"A report on four successive corrections of OMR-generated scores and implications for four MIR tasks.","tags":null,"title":"Data Quality Matters: Iterative Corrections on a Corpus of Mendelssohn String Quartets and Implications for MIR Analysis","type":"publication"},{"authors":["Néstor Nápoles López","Ichiro Fujinaga"],"categories":null,"content":"","date":1602460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"d46d55447d22cd9e513bcaac5b4798e9","permalink":"/publication/harmonic_reductions/","publishdate":"2020-10-12T00:00:00Z","relpermalink":"/publication/harmonic_reductions/","section":"publication","summary":"A preliminary experiment on harmonic reductions as a data augmentation strategy in tonal MIR tasks","tags":null,"title":"Harmonic Reductions As a Strategy for Creative Data Augmentation","type":"publication"},{"authors":["Néstor Nápoles López","Laurent Feisthauer","Florence Levé","Ichiro Fujinaga"],"categories":null,"content":" ","date":1602460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"fdbd80b4f1f2055c2909dc69608f62aa","permalink":"/publication/modulation_tonicization/","publishdate":"2020-10-12T00:00:00Z","relpermalink":"/publication/modulation_tonicization/","section":"publication","summary":"A dataset and methodology for the evaluation of changes of key","tags":null,"title":"On Local Keys, Modulations, and Tonicizations","type":"publication"},{"authors":["Néstor Nápoles López","Ichiro Fujinaga"],"categories":null,"content":"","date":1590624e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"32cd996256076abd368ddc1b889c4dbb","permalink":"/publication/harmalysis/","publishdate":"2020-05-28T00:00:00Z","relpermalink":"/publication/harmalysis/","section":"publication","summary":"A grammar for encoding roman numeral analysis annotations within the lyrics of a symbolic music representation","tags":null,"title":"Harmalysis: A Language for the Annotation of Roman Numerals in Symbolic Music Representations","type":"publication"},{"authors":["Néstor Nápoles López","Yuval Adler"],"categories":null,"content":"","date":1588550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"12c51b896a231ae15fc96ebe98e72b86","permalink":"/publication/doremyth/","publishdate":"2020-05-04T00:00:00Z","relpermalink":"/publication/doremyth/","section":"publication","summary":"Do-Re-Myth is an ear training game developed by Yuval Adler and Néstor Nápoles López, funded through a CIRMMT Student Award in 2019.","tags":null,"title":"Do-Re-Myth: An Ear Training Game","type":"publication"},{"authors":["Néstor Nápoles López","Claire Arthur","Ichiro Fujinaga"],"categories":null,"content":"","date":1573257600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"0158860af4f84640eb553d5c241dbd9a","permalink":"/publication/justkeydding/","publishdate":"2019-09-09T00:00:00Z","relpermalink":"/publication/justkeydding/","section":"publication","summary":"A new key detection algorithm that works in the symbolic and audio domain, furthermore, it is able to output local and global keys","tags":null,"title":"Key-Finding Based on a Hidden Markov Model and Key Profiles","type":"publication"},{"authors":["Néstor Nápoles López","Gabriel Vigliensoni","Ichiro Fujinaga"],"categories":null,"content":"","date":1559174400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"f25f13d0b95774c5069a95dc2886f86a","permalink":"/publication/effects_of_translation/","publishdate":"2019-05-30T00:00:00Z","relpermalink":"/publication/effects_of_translation/","section":"publication","summary":"What happens when you translate between different symbolic music formats?","tags":null,"title":"The Effects of Translation Between Symbolic Music Formats: A Case Study with Humdrum, Lilypond, MEI, and MusicXML","type":"publication"},{"authors":["Néstor Nápoles López","Ichiro Fujinaga"],"categories":null,"content":"","date":15552e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"51ef84f739a6812fe72136acb9c4b622","permalink":"/publication/musical_tictactoe/","publishdate":"2019-04-14T00:00:00Z","relpermalink":"/publication/musical_tictactoe/","section":"publication","summary":"A music-based game mechanic based where players compete to complete cadences.","tags":null,"title":"Musical Tic-Tac-Toe","type":"publication"},{"authors":["Néstor Nápoles López","Ichiro Fujinaga"],"categories":null,"content":"","date":1555113600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"a710694cf5219de6aeec761287fd32a9","permalink":"/publication/dandelot/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/dandelot/","section":"publication","summary":"Dandelot is a computer game that trains your skills for reading music in the treble, bass, and alto clefs.","tags":["Source Themes"],"title":"Dandelot - Reading Music as a Game","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Néstor Nápoles López","Gabriel Vigliensoni","Ichiro Fujinaga"],"categories":null,"content":" ","date":1538092800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"046a137a938d278a44664d5147fefe73","permalink":"/publication/encoding_matters/","publishdate":"2018-09-28T00:00:00Z","relpermalink":"/publication/encoding_matters/","section":"publication","summary":"Examples of encoding discrepancies that have been introduced either during the encoding of the symbolic music files or during the translation of the original file into other symbolic formats.","tags":null,"title":"Encoding Matters","type":"publication"},{"authors":["Néstor Nápoles López"],"categories":null,"content":"I have been a linux user for a few years now.\nI have also been interested in playing games in my computer (although being a gamer nowadays feels like a full-time job, so I don\u0026rsquo;t consider myself a hardcore gamer).\nI often run a dual boot system, doing most of my daily chores on Linux, and playing during the weekends on my MS Windows partition.\nTo my surprise, installing a linux partition in this particular laptop was straightforward. No special settings on the bootloader, no special proprietary drivers for my WiFi. It just worked out of the box after I booted and installed a live usb flash drive.\nOf course, the proprietary graphics driver, CUDA, and cuDNN have to be installed independently after the fresh OS install if you are interested in using the graphics card to train some deep learning models.\nThose components are what I will be covering in this post.\nI will also be assuming that you are running an Ubuntu 20.04 distro.\nThe steps should be fairly similar for other Debian-based distros.\nInstalling proprietary NVIDIA drivers You have a few options for installing the graphic drivers. If you don\u0026rsquo;t feel like modding your default OS too much, I recommend you to simply install them from the Additional Drivers tab in your Software \u0026amp; Updates menu in Ubuntu.\nLaunch the Activities menu and type Additional Drivers\nYou should see the option for your NVIDIA RTX2070 there.\nInstall the latest version available and tested.\nIn my case, and at the time of this writing, that is nvidia-driver-450.\nInstalling CUDA Tensorflow works with CUDA v10.1.\nThe CUDA toolkit for v10.1 can be found in the package manager.\nsudo apt-get install nvidia-cuda-toolkit  Check the version\n$ nvcc --version nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2019 NVIDIA Corporation Built on Sun_Jul_28_19:07:16_PDT_2019 Cuda compilation tools, release 10.1, V10.1.243  If you are in v10.1, you are good to go.\nInstalling cuDNN Tensorflow requires cuDNN v7.6.\nYou can obtain the library either as a .deb package or by downloading the zipped .so libraries.\nAt the time of this writing, the .deb package is only available for Ubuntu \u0026lt;=18.04 and the folder structure differs from the folder structure of my cuda library installed from the package manager.\nI suggest downloading the .so libraries.\nYou can either download the zipped files of v7.6.5, or browse the archive.\n Note that you need to make an account to download these zipped files from NVIDIA\n Uncompress the file somewhere in your file system\n$ tar xvf cudnn-10.1-linux-x64-v7.6.5.32.tgz  That should generate a folder named cuda wherever you uncompressed it.\nFor your convenience, make a variable CUDNNDIR that points to wherever place you uncompressed the file in.\nIn my case, I uncompressed inside my Download folder, so this is how it looks\n$ CUDNNDIR=~/Downloads/cuda  This is the structure of my uncompressed file\n$ tree $CUDNNDIR . ├── include │ └── cudnn.h ├── lib64 │ ├── libcudnn.so -\u0026gt; libcudnn.so.7 │ ├── libcudnn.so.7 -\u0026gt; libcudnn.so.7.6.5 │ ├── libcudnn.so.7.6.5 │ └── libcudnn_static.a └── NVIDIA_SLA_cuDNN_Support.txt  In my Ubuntu 20.04 and using the nvidia-cuda-toolkit package from aptitude, the library is installed here:\nCUDADIR=/lib/cuda  I also suggest making a variable that points to that place. Replace /lib/cuda with your location if that\u0026rsquo;s not where the library was installed.\nThe structure of my CUDADIR:\n$ tree $CUDADIR /lib/cuda ├── bin ├── include ├── lib64 ├── nvvm │ └── libdevice -\u0026gt; ../../nvidia-cuda-toolkit/libdevice └── version.txt  The CUDADIR is where we need to install the cuDNN library.\nInstalling, in this context, is basically copying the headers and shared library. Then, making these files available to external libraries like tensorflow.\nCopy the headers\nsudo cp ${CUDNNDIR}/include/*.h ${CUDADIR}/include/  Copy the shared libraries\nsudo cp ${CUDNNDIR}/lib64/libcudnn* ${CUDADIR}/lib64  The file structure of the CUDA library should look something like this now\n/lib/cuda ├── bin ├── include │ └── cudnn.h ├── lib64 │ ├── libcudnn.so │ ├── libcudnn.so.7 │ ├── libcudnn.so.7.6.5 │ └── libcudnn_static.a ├── nvvm │ └── libdevice -\u0026gt; ../../nvidia-cuda-toolkit/libdevice └── version.txt  Change permissions to the recently copied files\nsudo chmod a+r ${CUDADIR}/include/cudnn*.h ${CUDADIR}/lib64/libcudnn*  That installed cuDNN in your system.\nAt least in my case, these files are still not reachable by tensorflow. You can achieve that by exporting the path to your LD_LIBRARY_PATH variable.\nexport LD_LIBRARY_PATH=${CUDADIR}/lib64:$LD_LIBRARY_PATH  Now check whether tensorflow 2 is able to see your gpu\n$ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; import tensorflow as tf \u0026gt;\u0026gt;\u0026gt; tf.config.list_physical_devices('GPU') [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]  If you get a non-empty list as the result of list_physical_devices('GPU'), that should be a good indicator.\nThe export instruction is not persistent and the changes will be lost after you close your terminal.\nMake it permanent by adding it to your ~/.bashrc file.\nPutting new statements at the end of the file is usually the best practice.\nWhen you do that, spell the $CUDADIR folder as an absolute path, do not use the $CUDADIR variable.\nYou should be all set. Try training something and check the console to corroborate it is doing it through your RTX2070.\nCheers.\n","date":1461110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"e1339d1a5c4a018d445c48f9d9af690d","permalink":"/post/msigl65/","publishdate":"2016-04-20T00:00:00Z","relpermalink":"/post/msigl65/","section":"post","summary":"I recently changed my laptop. I thought a long journey awaited for me making this relatively new laptop work with Linux. To my surprise, it wasn't too difficult. Props on MSI for making Linux-friendly hardware! Here are the steps to install the graphics driver and get this laptop running Tensorflow 2 on the RTX2070 card.","tags":null,"title":"Linux with Tensorflow in MSI GL65 (with RTX2070)","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"One of the barberpole phasing and flanging illusions described in Equeda et al. (2015).\nAbstract During the course MUMT 501: Digital Audio Signal Processing, I implemented one of the barberpole phasing and flanging illusions discussed in a paper by Esqueda et al. (2015). The paper write-up can also be accessed in PDF form. The slides of the final presentation I made can be accessed here.\nIntroduction In his work of additive synthesis, Shepard introduced an infinitely ascending chromatic scale.\n An infinitely ascending chromatic scale as presented by Shepard  This auditory illusion resembles some similarity to the effect caused by barber-poles in american and british barber shops. In the case of the barber-poles, one image with colored stripes in diagonal is attached to a rotating cylinder and presented over and over in circles. The interesting thing about this process is that the cycle is difficult to perceive, and therefore, creates the illusion of the stripes ascending forever.\nSimilarly, the auditory illusion proposed by Shepard is nothing but an analogy in the auditory domain, presenting a cycle of raising harmonics that repeats every octave.\nIn order to achieve this auditory illusion, we could summarize the steps proposed by Shepard as following:\n  Computing several harmonics one octave apart from each other\n  The harmonics in the middle must be louder than the ones at the beginning or end of the frequency spectrum\n  We need to change the gain of each harmonic as time goes on, for example, using some spectral envelope\n  Shepard achieves the change of gain for each harmonic by using a raised-cosine spectral envelope.\n A time-varying spectral envelope used to create the illusion of the infinitely ascending chromatic scale, as presented by Shepard  It is mainly this idea of the raised-cosine spectral envelope that has been preserved and reformulated in the audio effects proposed by Esqueda, Välimäki, and Parker. This type of effects have been called barber-pole flanging and phasing illusions, in accordance to the similarity to the barber-poles, mentioned before in the introduction.\nEsqueda, Välimäki, and Parker present three different ideas for implementing barber-pole phasing and flanging audio effects: A network of cascaded time-varying notch filters, a synchronized dual flanger, and a single-sideband modulation filter.\nIn the following sections of this paper, I will briefly introduce the concept of each of these filters proposed by Esqueda, Välimäki, and Parker. Then, in the following section I am going to provide my experience implementing one of them, the network of cascaded time-varying notch filters.\nCascaded Time-Varying Notch Filters In the original proposal by Shepard, the methodology considers the creation of the auditory illusion by means of the additive synthesis of several harmonics, which are one octave apart, and whose gain is shaped by the raised-cosine spectral envelope.\nThis and the other audio effects, however, are dealing with a different problem, which involves not the attempt to synthesize the illusion from scratch, but instead, having an input signal and filtering it in some way so the illusion emerges from the content of the signal itself.\nPhasers and flangers work by creating sweeping notches in the spectrum of the original signal, these are the selected mechanisms by Esqueda, Välimäki, and Parker to create the barber-pole illusions.\n The magnitude response of a cascaded network of notch-filters as presented by Esqueda, Välimäki, and Parker  The magnitude of a network of cascaded notch-filters is presented.\nEach notch in the magnitude response represents the contribution of a different notch-filter.\nIn general, this method of generating the auditory illusion is the one that feels the closest to the original proposal by Shepard. For Shepard, each harmonic represented an additional element in the chain of additive synthesis. By contrast, in this audio effect each notch-filter is an additional element in the network that shapes the spectrum of the original signal so that the barber-pole illusion emerges.\nThe level of gain of each notch-filter, in this case attenuation, is also controlled by a raised-cosine envelope, and time-varying for every sample of the signal.\nSynchronized Dual Flanger The second effect proposed by Esqueda, Välimäki, and Parker is a dual flanger.\nThe design of the system starts as a single flanger. The first interesting characteristic of this flanger is the decision of using a sawtooth waves as the Low-Frequency Oscillator (LFO) that modulates the gain of the delayed signal, as well as another sawtooth wave that modulates the length of the delay.\nThe motivation for using a sawtooth LFO is simple and elegant, it provides an unidirectional growth over time that abruptly restarts for the beginning of the next cycle. The auditory illusion requires that the sweeping of the notches moves in the same direction for the entire cycle, the sawtooth LFO provides exactly that.\nOne drawback introduced by this approach is the abrupt interruption introduced by restarting the cycle from one instant to another, which can give away the cyclic behavior of the system, and which is enemy to the purpose of creating the auditory illusion. In order to soften the transition between one cycle and another, the second flanger is added. Hence, the dual flanger system.\nThe second flanger is an identical copy of the first flanger, it also has a sawtooth LFO modulating the delay range and gain of the flanger, the main difference is that both LFOs are in a $\\frac{pi}{2}$ phase with respect to their corresponding LFOs in the first flanger.\n The phase relationship between the four LFOs involved in the dual flanger system as presented by Esqueda, Välimäki, and Parker  Figure 4 shows the phase relationship between the two flangers in the dual-flanger system.\nSingle-Sideband Modulation The third method presented by Esqueda, Välimäki, and Parker consists of a system based on the combination of a signal and a frequency-shifted version of the same signal (single-sideband modulation).\nThree main important considerations have to be addressed in the method proposed by Esqueda, Välimäki, and Parker. The first consideration is that the frequency-shifted copy of the signal should be added to the original signal only after delaying it for a short period. It is the short delay that generates the notches in the spectrum of the output signal of the system.\nThe second consideration is that it is necessary to have linearity between the frequency shifter and the delay given to the modulated signal. Once this two considerations are met, the system will produce notches that are linearly distributed across the spectrum and that sweep in the same direction.\nSince the notches produced by the system are linearly distributed, this does not favor the emergence of the barber-pole illusion. In order for this to happen, the notches need to be one octave apart from each other, as in the method by Shepard.\nThe third consideration deals with this problem, Esqueda, Välimäki, and Parker suggest replacing the delay line of the system for a chain of first-order all-pass filters acting as an spectral delay.\nWith this final modification, the system is able to produce sweeping notches that are one octave from each other provided that the settings on each of the all-pass filters are accurately optimized to meet the desired group-delay curve.\nImplementation of the cascaded time-varying notch-filters The description of the systems presented by Esqueda, Välimäki, and Parker is informative regarding the methodologies that should be followed to accomplish an implementation of each of the systems.\nHere we follow the methodologies proposed for the first system, the network of cascaded notch-filters, to implement a prototype of the audio effect in MATLAB.\nThe code of the implementation is given as an accompanying resource to this paper, the code consists of several functions that compute all of the parameters required for the system to operate on any given input signal. The accompanying implementation also provides two main scripts, one that provides an entry-point for the filter, which should be called to process an input signal, furthermore, another script tests and makes use of this entry-point with a white-noise signal and a combination of parameters that successfully create a barber-pole auditory illusion.\nThe first step in the process of implementing this audio effect is to separate the global parameters of the system from the time-varying parameters, i.e., the parameters that should be computed every short-time (in practice, every sample) in which the filter is operating.\nThis division between global and time-varying parameters is not given by the original proposal of Esqueda, Välimäki, and Parker. Therefore, it represents an interpretation of the parameters and workflow of the original methodology that must be made in order to effectively implement a prototype of the working system.\nThe global parameters of the audio effect are the following:\n  $M$: The number of notch-filters in the cascade\n  $F_s$: The sampling rate of the system\n  $K$: The number of frequencies per cycle. Given by $K = \\text{floor}(F_s/p)$\n  $Q$: A control of the bandwidth of the notch-filters\n  $p$: The repetition rate of the cycle (how many times is the system reaching an octave every second), in Hertz\n  $L_{min}$: Minimum loudness level, in decibels\n  $L_{max}$: Maximum loudness level, in decibels\n  The time-varying parameters of the audio effect are the following:\n  $f_c(m,k)$: Center frequency of the $m^{th}$ filter in the $k^{th}$ frequency index of the cycle\n  $L_c(m,k)$: Loudness of the $k^{th}$ frequency of the $m^{th}$ filter, in decibels\n  $G$: The normalized version of gain $L_c$, in the range $[0,1]$\n  $\\beta$: A factor that involves the bandwidth and the gain at the bandwidth, used to compute the coefficients of the notch-filters\n  Once the most important parameters of the system have been defined and classified accordingly, the next step is to define the workflow of the system, especially for the time-varying part of the system which is the most complicated to implement, as it involves the computation of the coefficients for all of the filters involved in the network.\nGiven that the parameter $K$ dictates the number of frequencies that have to be computed every cycle, this parameter defines the length of the short-time sections of the signal that have to be processed by the system. In fact, using the definition provided by Esqueda, Välimäki, and Parker for computing the value of $K$, we can observe that it is equivalent to the number of samples that exist in one cycle. This means that there is a relationship of one sample for one frequency in every case, for any sampling rate or repetition rate of the system. At this point, we can safely assume that our implementation of the audio effect has to effectively compute a new set of notch-filters for every sample of the input signal.\nThe implementation that we followed, considers then, that the global parameters will be provided by the user to the system. One exception are the global parameters which can be obtained from other global parameters (e.g., $K$), these are not required from the user and are computed internally instead.\nOnce the global parameters are present in the system, we then start processing the signal.\nThe methodology from Esqueda, Välimäki, and Parker provides the transfer function used to compute each of the notch-filters of the system.\n$$H(z) = \\frac{ \\big( \\frac{ 1 + g \\beta }{ 1 + \\beta } \\big) - 2 \\big( \\frac{ \\cos( \\frac{ 2 \\pi f_c }{ F_s } ) }{ 1 + \\beta } \\big) z^{-1} + \\big( \\frac{ 1 - G \\beta }{ 1 + \\beta } \\big) z^{-2} }{ 1 - 2 \\big( \\frac{ \\cos( \\frac{ 2 \\pi f_c }{ F_s } ) }{ 1 + \\beta } \\big) z^{-1} + \\big( \\frac{ 1 - \\beta }{ 1 + \\beta } \\big) z^{-2} } $$\nThe most efficient way to compute the network of cascaded notch-filters would be to anticipate the system by multiplying the transfer function of a network of notch-filters to get one resulting system and use this system to filter the input signal, however, since the number of notch-filters in our network is an unknown parameter, $M$, controlled by the user, it is not easy to come with a strategy to pre-compute all the possible numbers of notch-filters in the network and their combinations with different parameters, such as the rate of the cycle of the audio effect.\nTherefore, I have decided that it is probably an easier strategy to use this transfer function to go back to the difference equation of the system, and compute the pertinent values of the coefficients of the system as they are needed.\nThe difference equation of a notch-filter is the following:\n$$y[n] = b_0 x[n] - b_1 x[n-1] + b_2 x[n-2] + a_1 y[n-1] - a_2 y[n-2]$$\nWhere the coefficients of the system correspond to\n$$b_0 = \\frac{ 1 + G \\beta }{ 1 + \\beta }$$\n$$b_1 = \\frac{ 2 \\cos( \\frac{ 2 \\pi f_c }{ F_s }) }{ 1 + \\beta }$$\n$$b_2 = \\frac{ 1 - G \\beta }{ 1 + \\beta }$$\n$$a_1 = b_1$$\n$$a_2 = \\frac{ 1 - \\beta }{ 1 + \\beta }$$\nThe final implementation consists then of a delay-line of second order which filters the input signal through a cascade of $M$ notch-filters. The coefficients of the notch-filters are computed for every sample, according to the properties of each notch-filter, namely, their center frequency $f_c$ and the attenuation computed for that center frequency $(L_c, G)$.\nThe implementation was done in Matlab, and all the source code is available here.\nAs an example, here is an audio input to the system and what it comes out.\nInput [wav]\n Output [wav]  Conclusions In this paper, I outline the implementation of a cascaded notch-filter system to create auditory illusions from an input signal. The reference methodology by Esqueda, Välimäki, and Parker was very informative about the parameters, formulas and methodologies used to test the filter and generate the sound samples and the plots presented in their paper. The implementation proposed here used the transfer function presented in the reference methodology and used it to get the difference equation of a notch-filter, computing its parameters for every sample and using those coefficients to filter the input signal through a delay-line of second order.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"1af6f1e62d5870f229bc21a6311d8856","permalink":"/reports/mcgill/mumt501/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reports/mcgill/mumt501/","section":"reports","summary":"One of the barberpole phasing and flanging illusions described in Equeda et al. (2015).\n","tags":null,"title":"MUMT 501: Barberpole Phasing and Flanging Illusions","type":"book"},{"authors":null,"categories":null,"content":"An experiment on melodic tension, implemented with jsPsych.\nAbstract During the course MUMT 615: Perception of Compositional Structures, we designed an experiment on melodic tension.\nI participated developing the code of the experiment. Erica Huynh designed the experiment and wrote the paper, and Timothy Ledger composed the musical examples.\nThe experiment was implemented using the jsPsych library.\nThe live experiment website is available here.\nThe source code of the experiment is available in a GitHub repository.\nThe paper with our results is available here.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"2acd1de8c1855b404e903f755a728c3f","permalink":"/reports/mcgill/mumt615/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reports/mcgill/mumt615/","section":"reports","summary":"An experiment on melodic tension, implemented with jsPsych.\n","tags":null,"title":"MUMT 615: Melodic Tension Experiment","type":"book"},{"authors":null,"categories":null,"content":"Inharmonicity in the context of plucked strings.\nAbstract During the course MUMT 616: Timbre as a Form-Bearing Dimension in Music, I talked about inharmonicity in the context of plucked strings.\nThe slides are available here.\nFive examples with varying degrees of inharmonicity are discussed. The examples are qualitatively classified as:\n No inharmonicity Low inharmonicity Mid inharmonicity High inharmonicity Extreme inharmonicity  The musical examples were generated from Manuel María Ponce\u0026rsquo;s Valse for Solo Guitar.\nThe inharmonicity was computed for each partial using the following formula:\n$$ f_n = nf_0 \\sqrt{1 + Bn^2} $$\nwhere $f_n$ is the frequency of a given partial, and the $B$ parameter controls the inharmonicity.\nThe SuperCollider programming language was used to generate the audio examples with varying inharmonicity.\nThe code is listed here for reference.\nExamples No inharmonicity   No inharmonicity   Low inharmonicity   Low inharmonicity   Mid inharmonicity   Mid inharmonicity   High inharmonicity   High inharmonicity   Extreme inharmonicity   Extreme inharmonicity   SuperCollider code for generating the audio samples ( SynthDef(\\inh, { |out=0, freq=440, amp=0.5, gate=1, c3=20, pan=0,fB = 180| var env = Env.new([0,1, 1, 0],[0.001,0.006, 0.0005],[5,-5, -8]); var inp = amp * LFClipNoise.ar(2000) * EnvGen.ar(env,gate); var son = DWGPluckedStiff.ar(freq, amp, gate,0.1,1,c3,inp,1,MouseX.kr(0,200)); DetectSilence.ar(son, 0.001, doneAction:2); Out.ar(out, Pan2.ar(son * 0.1, pan)); }).add; ) ( SynthDef(\\har, { |out=0, freq=440, amp=0.5, gate=1, c3=20, pan=0| var env = Env.new([0,1, 1, 0],[0.001,0.006, 0.0005],[5,-5, -8]); var inp = amp * LFClipNoise.ar(2000) * EnvGen.ar(env,gate); var son = DWGPlucked.ar(freq, amp, gate,0.1,1,c3,inp,1); DetectSilence.ar(son, 0.001, doneAction:2); Out.ar(out, Pan2.ar(son * 0.1, pan)); }).add; ) ( SynthDef(\\noinh, { |out=0, freq=440, amp=0.4, fB=0| //partials = 4 // Number of partials cannot change dynamically in the SynthDef :( var sig, env, partials = 16; // Need an envelope, otherwise the sinewaves play forever env = Env.linen(0.03, 0.5, 0.15, amp); // Summing the sinewaves sig = Mix.fill(partials, { arg i; // Need a 1-based-index for the partials var n = i+1, harmonic, partial, ampdecay; harmonic = n*freq; partial = harmonic * sqrt(1 + (fB* n**2)); ampdecay = 1/n; SinOsc.ar(partial, 0, ampdecay * EnvGen.kr(env,doneAction:2)); } ); Out.ar(out, Pan2.ar(sig)); }).add; ) ( SynthDef(\\sineSynth, { |out=0, freq=440, amp=0.4| var sig; sig = SinOsc.ar(freq, 0, amp); Out.ar(out, Pan2.ar(sig)); }).add; ) ( SynthDef(\\lowinh, { |out=0, freq=440, amp=0.4, fB=0.005| //partials = 4 // Number of partials cannot change dynamically in the SynthDef :( var sig, env, partials = 20; // Need an envelope, otherwise the sinewaves play forever env = Env.linen(0.03, 0.4, 0.15, amp); // Summing the sinewaves sig = Mix.fill(partials, { arg i; // Need a 1-based-index for the partials var n = i+1, harmonic, partial, ampdecay; harmonic = n*freq; partial = harmonic * sqrt(1 + (fB* n**2)); ampdecay = 1/n; SinOsc.ar(partial, 0, ampdecay * EnvGen.kr(env,doneAction:2)); } ); Out.ar(out, Pan2.ar(sig)); }).add; ) ( SynthDef(\\midinh, { |out=0, freq=440, amp=0.4, fB=0.015| //partials = 4 // Number of partials cannot change dynamically in the SynthDef :( var sig, env, partials = 20; // Need an envelope, otherwise the sinewaves play forever env = Env.linen(0.03, 0.4, 0.15, amp); // Summing the sinewaves sig = Mix.fill(partials, { arg i; // Need a 1-based-index for the partials var n = i+1, harmonic, partial, ampdecay; harmonic = n*freq; partial = harmonic * sqrt(1 + (fB* n**2)); ampdecay = 1/n; SinOsc.ar(partial, 0, ampdecay * EnvGen.kr(env,doneAction:2)); } ); Out.ar(out, Pan2.ar(sig)); }).add; ) ( SynthDef(\\highinh, { |out=0, freq=440, amp=0.4, fB=0.0874| //partials = 4 // Number of partials cannot change dynamically in the SynthDef :( var sig, env, partials = 20; // Need an envelope, otherwise the sinewaves play forever env = Env.linen(0.03, 0.4, 0.15, amp); // Summing the sinewaves sig = Mix.fill(partials, { arg i; // Need a 1-based-index for the partials var n = i+1, harmonic, partial, ampdecay; harmonic = n*freq; partial = harmonic * sqrt(1 + (fB* n**2)); ampdecay = 1/n; SinOsc.ar(partial, 0, ampdecay * EnvGen.kr(env,doneAction:2)); } ); Out.ar(out, Pan2.ar(sig)); }).add; ) ( SynthDef(\\crazyinh, { |out=0, freq=440, amp=0.4, fB=1| //partials = 4 // Number of partials cannot change dynamically in the SynthDef :( var sig, env, partials = 20; // Need an envelope, otherwise the sinewaves play forever env = Env.linen(0.03, 0.4, 0.15, amp); // Summing the sinewaves sig = Mix.fill(partials, { arg i; // Need a 1-based-index for the partials var n = i+1, harmonic, partial, ampdecay; harmonic = n*freq; partial = harmonic * sqrt(1 + (fB* n**2)); ampdecay = 1/n; SinOsc.ar(partial, 0, ampdecay * EnvGen.kr(env,doneAction:2)); } ); Out.ar(out, Pan2.ar(sig)); }).add; ) ( m = SimpleMIDIFile.read(\u0026quot;/Stimulus 1 major.mid\u0026quot;); m.p(\\noinh).play; ) ( m = SimpleMIDIFile.read(\u0026quot;/op28n20.mid\u0026quot;); m.p(\\lowinh).play; ) ( m = SimpleMIDIFile.read(\u0026quot;/op28n20.mid\u0026quot;); m.p(\\lowinh).play; ) ( m = SimpleMIDIFile.read(\u0026quot;/op28n20.mid\u0026quot;); m.p(\\lowinh).play; ) ( Routine.run { var s, m, synth, release; s = Server.default; s.sync; s.record(path: \u0026quot;~/out.wav\u0026quot;.standardizePath); release = 0.3; m = SimpleMIDIFile.read(\u0026quot;/Stimulus 1 major.mid\u0026quot;); m.p(\\lowinh).play; 3.wait; // Wait for the Synth to release before stopping the recording. release.wait; s.stopRecording; }; ) s.stopRecording; ( Routine.run { var s, synth, release; s = Server.default; s.sync; s.record(path: \u0026quot;~/out.wav\u0026quot;.standardizePath); release = 0.3; synth = Synth(\\noinh, [freq: 30.midicps]); 2.wait; synth.set(0); // Wait for the Synth to release before stopping the recording. release.wait; s.stopRecording; }; ) ( x = Synth(\\sineSynth); f = { arg m; x.set(\u0026quot;freq\u0026quot;, m.midicps); m.postln; }; m = SimpleMIDIFile.read(\u0026quot;/Stimulus 1 major.mid\u0026quot;); //x = Synth(\\sineSynth); m.playNotesWithFunction(f) ) ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"bd1028a6a832e6d3836e725722aa9da4","permalink":"/reports/mcgill/mumt616/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reports/mcgill/mumt616/","section":"reports","summary":"Inharmonicity in the context of plucked strings.\n","tags":null,"title":"MUMT 616: Inharmonicity","type":"book"},{"authors":null,"categories":null,"content":"MATLAB implementation of a digital model of distortion by Yeh et al. (2007).\nAbstract This is a report for my final project of the MUMT 618: Computational Modeling of Musical Acoustic Systems class at McGill University.\nI will describe my experience implementing a digital model of distortion that has been presented in the paper titled \u0026ldquo;Simplified, physically-informed models of distortion and overdrive guitar effects pedals\u0026rdquo;, presented in 2007 by David Yeh, Jonathan Abel, and Julius Smith at the DAFx'07 Conference.\nAlthough this paper describes two models:\n Boss DS-1, a distortion pedal Ibanez TS-9, an overdrive pedal  I have only implemented the model of the Boss DS-1 distortion pedal. The implementation provided has been done in MATLAB and does not opertate in real-time, however, a real-time implementation should not be difficult to derivate from the given code. I also provide a few audio examples of the audio effect. As of my knowledge, there are no existing audio examples or code for this model previous to this write-up, therefore, I consider it is a valuable contribution for anyone following the ideas of this paper for reproducing or improving the model.\nOverview A high-level overview can be seen in the following diagram from the paper\n Overview of the Boss DS-1 model, obtained from Yeh et al. (2007)  It is possible that all of these stages may have an audible effect in the output produced by the physical pedal, however, the model only provides a continuous-time transfer function for the Gain + filter and the Saturating nonlin stages, therefore, this implementation concentrates in these two stages only.\nThe diagrams presented in the paper are excerpts of the circuit, which are sometimes difficult to follow, therefore, as an additional resource, it was very helpful to consult this article from ElectroSmash. In this document, a full view of the schematic is displayed with the different stages labeled.\n Schematic of the Boss DS-1, obtained from ElectroSmash.com  The Gain + filter stage in the paper\u0026rsquo;s diagram corresponds to the Transistor Booster stage of the schematic, its main component is a bipolar junction transistor. The Saturating nonlin stage of the paper\u0026rsquo;s diagram corresponds roughly to the Op-Amp Gain Stage. From now on, I will refer to the names of the schematic as I find them more intuitive.\nTransistor Booster Stage This stage corresponds to a single bipolar junction transistor, the continuous-time transfer function provided in the paper is the following:\n$$ H(s) = \\frac{s^{2}}{(s + \\omega_1) (s + \\omega_2)} $$\nwhere $ \\omega_1 = 2\\pi3 $ and $ \\omega_2 = 2\\pi600 $\nOp-Amp Gain Stage This stage corresponds to the main nonlinearity of the circuit, according to the paper. One parameter is provided in this stage to control the amount of distortion that the audio effect will output. The continuous-time transfer function is defined as following:\n$$ H(s) = \\frac{(s + \\frac{1}{R_t C_c}) (s + \\frac{1}{R_b C_z}) + \\frac{s}{R_b C_c}}{(s + \\frac{1}{R_t C_c})(s + \\frac{1}{R_b C_z})} $$\nwhere $$R_t = 100 000 D $$ $$R_b = (1-D)100 000 + 4700$$ $$C_z = 0.000 001$$ $$C_c = 0.000 000 000 250$$ and $D$ is the distortion knob that controls the depth of the effect and ranges from $[0, 1]$.\nAs one may guess, these continuous-time transfer functions require discretization in order to be implemented in a digital system. In order to discretize them, Yeh et al. propose the use of the bilinear transform. In the paper\u0026mdash;as well as in David Yeh\u0026rsquo;s PhD dissertation\u0026mdash;a list of (very useful) templates has been included, which helps in the process of discretizing the two continuous-time transfer functions used in this model. The relevant templates for this implementation are the templates corresponding to second-order filters.\nBilinear Transform In order to discretize a continuous-time transfer function, first, we should put the continuous-time transfer function in the following form $$ H(s) = \\frac{b_2 s^2 + b_1 s + b_0}{a_2 s^2 + a_1 s + a_0} $$\nOnce we compute the corresponding coefficients, they can be placed in a discrete-time transfer function of the form\n$$ H(z) = \\frac{B_0 + B_1 z^{-1} + B_2 z^{-2}}{A_0 + A_1 z^{-1} + A_2 z^{-2}} $$\nThe discrete-time coefficients of this transfer function can be obtained from the following equations $$ B_0 = b_0 + b_1 c = b_2 c^2 $$ $$ B_1 = 2b_0 - 2b_2 c^2 $$ $$ B_2 = b_0 - b_1 c = b_2 c^2 $$ $$ A_0 = a_0 + a_1 c = a_2 c^2 $$ $$ A_1 = 2a_0 - 2a_2 c^2 $$ $$ A_2 = a_0 - a_1 c = a_2 c^2 $$\nAfter plugging the coefficients into the discrete-time transfer function, we should be able to implement the resulting transfer function as a digital filter.\nImplementation of the Transistor Booster Stage Using the steps described above, I now describe the implementation of the Transistor Booster Stage part of the model.\nThe first step would be to put the given continuous-time transfer function in the form of the bilinear transform template $$ H(s) = \\frac{s^2}{s^2 + (\\omega_1 + \\omega_2)s + \\omega_1 \\omega_2} $$ From here, the continuous-time coefficients can be easily extracted $$ b_2 = 1 $$ $$ b_1 = 0 $$ $$ b_0 = 0 $$ $$ a_2 = 1 $$ $$ a_1 = \\omega_1 + \\omega_2 = 2\\pi 3 + 2\\pi 600 = 1206\\pi $$ $$ a_0 = \\omega_1 \\omega_2 = (2\\pi 3)(2 \\pi 600) = 7200\\pi^2 $$\nWorking the templates for the discrete-time coefficients results in the following $$ B_0 = 4fs^2 $$ $$ B_1 = -8fs^2 $$ $$ B_2 = 4fs^2 $$ $$ A_0 = 7200\\pi^2 + 2412\\pi fs + 4fs^2 $$ $$ A_1 = 14400\\pi^2 - 8fs^2 $$ $$ A_2 = 7200\\pi^2 - 2412\\pi fs + 4fs^2 $$\nShowing once again the template of the second-order discrete-time transfer function $$ H(z) = \\frac{B_0 + B_1 z^{-1} + B_2 z^{-2}}{A_0 + A_1 z^{-1} + A_2 z^{-2}} $$\nPlugging the values of the coefficients recently found, gives the following equation $$ {\\scriptsize H(z) = \\frac{4fs^2 - 8fs^2 z^{-1} + 4fs^2 z^{-2}}{(7200\\pi^2 + 2412\\pi fs + 4fs^2) +(14400\\pi^2 - 8fs^2) z^{-1} + (7200\\pi^2 - 2412\\pi fs + 4fs^2) z^{-2}}} $$\nAfter dividing by $4$, factorizing $fs$, and doing some algebra to simplify the equation, this can be expressed as: $$ {\\small H(z) = \\frac{1 -2 z^{-1} + z^{-2}}{(1800 \\Omega^2 + 603 \\Omega + 1) + (3600 \\Omega^2 - 2) z^{-1} + (1800\\Omega^2 - 603\\Omega + 1) z^{-2}} } $$\nwith $\\Omega = \\frac{\\pi}{fs}$\nThe implementation of this discrete-time transfer function results in a filter with the following magnitude response:\n Magnitude response of the implemented Transistor Booster Stage (uncorrected)  By inspecting the original magnitude response shown in the paper, it can be concluded that the implemented filter should output above $30dB$ of gain in its bandpass.\n Magnitude response of the Transistor Booster Stage shown at Yeh et al. (2007)  Luckily, in the corresponding section of this stage, the paper mentions that the expected gain in the bandpass is, in fact, $36dB$. Using this information, an additional gain, $g$, is included in the discrete-time transfer function:\n$$ {\\small H(z) = \\frac{g(1 -2 z^{-1} + z^{-2})}{(1800 \\Omega^2 + 603 \\Omega + 1) + (3600 \\Omega^2 - 2) z^{-1} + (1800\\Omega^2 - 603\\Omega + 1) z^{-2}} } $$\nwhere the equation, $36dB = \\log_{10}(g) * 20$, can be used to obtain the value of $g$\n$$ g = 10^{\\frac{36}{20}} = 63.0957 $$\nThe resulting magnitude response resembles much more the magnitude response shown in the paper\n Magnitude response of the implemented Transistor Booster Stage (corrected)  This filter\u0026mdash;including its correction\u0026mdash;can be implemented with the following MATLAB function:\n% Transistor Booster Stage % Implementation by Nestor Napoles Lopez % based on the paper by Yeh et al. (2007) function y = bjtfilt(x, fs) % After working the math, I put all the discrete-time % coefficients in terms of this variable coeff coeff = pi/fs; B0 = 1; B1 = -2; B2 = 1; A0 = 1800.*coeff.^2 + 603.*coeff + 1; A1 = 3600.*coeff.^2 - 2; A2 = 1800.*coeff.^2 - 603.*coeff + 1; % We obtain the gain from % 36dB = log10(x) * 20 amp = 10.^(36/20); B = amp .* [B0, B1, B2]; A = [A0, A1, A2]; y = filter(B, A, x); end  Implementation of the Op-Amp Gain Stage Just as done during the Transistor Booster Stage, the implementation of the Op-Amp Gain Stage starts from a given continuous-time transfer function $$ H(s) = \\frac{(s + \\frac{1}{R_t C_c}) (s + \\frac{1}{R_b C_z}) + \\frac{s}{R_b C_c}}{(s + \\frac{1}{R_t C_c})(s + \\frac{1}{R_b C_z})} $$\nPutting this transfer function in the form of the bilinear transform template $$ H(s) = \\frac{s^2 + (\\frac{1}{R_b C_z} + \\frac{1}{R_t C_c} + \\frac{1}{R_b C_c})s + \\frac{1}{R_t C_c R_b C_z}}{s^2 + (\\frac{1}{R_b C_z} + \\frac{1}{R_t C_c})s + \\frac{1}{R_t C_c R_b C_z}} $$\nThe continous-time coefficients can be obtained $$ b_2 = 1 $$ $$ b_1 = \\frac{1}{R_b C_z} + \\frac{1}{R_t C_c} + \\frac{1}{R_b C_c} $$ $$ b_0 = \\frac{1}{R_t C_c R_b C_z} $$ $$ a_2 = 1 $$ $$ a_1 = \\frac{1}{R_b C_z} + \\frac{1}{R_t C_c} $$ $$ a_0 = \\frac{1}{R_t C_c R_b C_z} $$\nSome of these coefficients are equivalent (e.g., $a_0 = b_0$), therefore, they can be summarized in the following coefficients: $$ ab_2 = 1 $$ $$ a_1 = \\frac{1}{R_b C_z} + \\frac{1}{R_t C_c} $$ $$ b_1 = a_1 + \\frac{1}{R_b C_c} $$ $$ ab_0 = \\frac{1}{R_t C_c R_b C_z} $$\nThe next step is to obtain the discrete-time coefficients, these can be expressed in terms of the simplified list of continuous-time coefficients presented above: $$ B_0 = ab_0 + b_1 c + c^2 $$ $$ B_1 = 2ab_0 - 2c^2 $$ $$ B_2 = ab_0 - b_1 c + c^2 $$ $$ A_0 = ab_0 + a_1 c + c^2 $$ $$ A_1 = 2ab_0 - 2c^2 $$ $$ A_2 = ab_0 - a_1 c + c^2 $$\nIn this case, the resulting magnitude response\n Magnitude response of the implemented Op-Amp Gain Stage  is quite similar to the magnitude response shown in the paper\n Magnitude response of the Op-Amp Gain Stage shown at Yeh et al. (2007)  The different colors of the first plot represent the magnitude response with values of $D$ going from $0.1$ to $1.0$. This is the MATLAB function that implements this filter:\n% Op-Amp Gain Stage % Implementation by Nestor Napoles Lopez % based on the paper by Yeh et al. (2007) function y = opampfilt(x, fs, DIST) % Resistors and capacitors from the model Rt = 100000 * DIST; Rb = 100000*(1-DIST) + 4700; Cz = 0.000001; Cc = 0.000000000250; % Constant for the bilinear transform c = 2*fs; % Continuous-time coefficients (reduced) ab0 = 1 / (Rt*Cc*Rb*Cz); a1 = 1/(Rb*Cz) + 1/(Rt*Cc); b1 = a1 + 1/(Rb*Cc); % Discrete-time coefficients B0 = ab0 + b1*c + c.^2; B1 = 2*ab0 - 2*c.^2; B2 = ab0 - b1*c + c.^2; A0 = ab0 + a1*c + c.^2; A1 = B1; A2 = ab0 - a1*c + c.^2; B = [B0, B1, B2]; A = [A0, A1, A2]; y = filter(B, A, x); end  Diode-Clipper At the end of the Op-Amp Gain Stage, there is an additional step that simulates the diode that clips the samples exceeding a gain threshold, in the case of the digital implementation, that threshold consists of $abs(x[n]) \\geq 1.0$. The diode-clipper has been implemented using one of the proposed methods in the paper:\n$$ \\text{clipper}(x) = \\frac{x}{(1 + |x|^n)^{1/n}} $$\nwith $n = 2.5$\nThe MATLAB code for the clipping function is the following:\n% Diode clipper % Implementation by Nestor Napoles Lopez, December 2018 % based on the paper by Yeh et al. (2007) function x = diodeclip(x) n = 2.5; for i=1:length(x) x(i) = x(i) / (1 + abs(x(i)).^n).^(1/n); end end  As a final step, I provide a script that cascades the two stages of the models to process an input audio example:\n% DS-1, main script % Implementation by Nestor Napoles Lopez, December 2018 % based on the paper by Yeh et al. (2007) % Sample audio [x, fs] = audioread('guitar_clean.wav'); % Bipolar Junction Transistor Stage y = bjtfilt(x, fs); % Op-amp Gain Stage D = 1; % D lies between [0, 1] y = opampfilt(y, fs, D); % Diode clipper y = diodeclip(y); s = audioplayer(y, fs); play(s);  Here is an example of the model applied to an audio sample of a clean electric guitar1:\nOriginal audio [wav]  Transistor Booster Stage only [wav]  Op-Amp Gain Stage only [wav]  Transistor Booster Stage and Op-Amp Gain Stage [wav]    This audio sample has been obtained from FreeSound.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"9ae1c1eb537a6664e417a92fb4db4c53","permalink":"/reports/mcgill/mumt618/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reports/mcgill/mumt618/","section":"reports","summary":"MATLAB implementation of a digital model of distortion by Yeh et al. (2007).\n","tags":null,"title":"MUMT 618: Implementation of Boss DS-1","type":"book"},{"authors":null,"categories":null,"content":"A musical game mechanic where players compete to complete a \u0026ldquo;cadence\u0026rdquo;.\nAbstract During the course MUMT 620: Gestural Control of Sound Synthesis, I developed a musical game mechanic, where players compete to complete a \u0026ldquo;cadence\u0026rdquo;.\nThe backend gestural interface of the game is implemented in PureData and the graphic interface in MobMuPlat.\nThe paper of the project is available here.\nThe source code is available here.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"68f6153826189a555e433d633e530ef9","permalink":"/reports/mcgill/mumt620/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reports/mcgill/mumt620/","section":"reports","summary":"A musical game mechanic where players compete to complete a \u0026ldquo;cadence\u0026rdquo;.\n","tags":null,"title":"MUMT 620: Cadence Game","type":"book"},{"authors":null,"categories":null,"content":"A Hidden Markov Model (HMM) for retrieving the musical key of a MIDI file.\nAbstract During the course MUMT 621: Music Information Acquisition, Preservation, and Retrieval, I designed and implemented a model for symbolic key detection.\nThe model was later extended to work with audio data and to retrieve local-key estimations as well. A dedicated entry in this website exists for the extended version, which was published in the proceedings of DLfM 2019.\nThis document describes the original class project. A PDF version of this document is also available.\nIntroduction Finding the key of a piece of Western art music has been in the interest of the Music Information Retrieval (MIR) community for several years already. Since they were introduced, the design or acquisition of key-profiles have been the preferred methodology to solve this problem. In this project, we combine the use of key-profiles with the capabilities of Hidden Markov Models (HMMs) to model the time-varying aspects of music to find the key of a piece of music by considering the pitch-class of every note in the piece as the observation symbol of an HMM.\n States and observation symbols of the proposed HMM. The blue states represent major keys, the red states represent minor keys, the green boxes represent the twelve pitch-classes  Design of the Hidden Markov Model As mentioned, the proposed HMM consists of 24 hidden states and 12 observation symbols.\nKeys as hidden states The hidden states correspond to 24 different major and minor keys (i.e., no distinction between enharmonics), each of these keys is represented as a hidden state in the model. All of the keys may transition to any of the other 23 keys, however, the probability of transitioning to neighbor keys in the circle of fifths is preferred over distant keys.\nPitch-classes as observation symbols All major and minor keys are able to emit any of the twelve pitch-classes before they transition to a new state, however, by acquiring the probability distributions from common key-profiles used for the task of key detection, the emission of diatonic tones of the key are preferred over accidental tones.\n A generic overview of the geometric model of key distance, starting from any tonic   The key distances of C Major  Parameters of the model Initial probabilities The initial probabilities of the model are the same for each key, $p(state) = \\frac{1}{24}$.\nState transitions The probability distributions for state transitions that happen after the initialization have been taken from a geometric model of key distance. The probability of a transition to another key in the next group of neighbors decreases exponentially. The geometric model of key distance can be observed in\nUsing this model, we can observe, for example, a list of the groups of neighbor keys for C Major, in descending order:\nGroup Keys 0 C 1 G F a c 2 d e f g 3 D Eb A Bb 4 E Ab bb b 5 Db B 6 eb f# 7 c# ab 8 F#  This structure of nine groups of neighbours repeats for all major and minor keys. We can use these groups to compute the transition probability for any key according to the following formula:\n$$p(s) = \\alpha^{(G-1) - s_g}$$\nwhere $G$ is the number of groups of neighbor keys to the current tonic, according to the geometric model (i.e., $G=9$), $s_g$ is the group to which the key $s$ belongs, $\\alpha$ is the probability ratio between a key of one group and a key from a contiguous group.\n Probability distribution for the next state if the current state is C Major  Figure 4 shows a plot of the probability distribution for the transition to the next key, if the current key is C Major.\nEmission probabilities The emission probability distributions have been taken from the common key-profiles used by other key detection algorithms. Particularly, we considered the same five pairs of key-profiles used in the comparison by Albrecht and Shanahan (2013).\nDataset The model has been evaluated using sets of short musical compositions in all major and minor keys. Each set follows the format of the Well-Tempered Clavier by Johann Sebastian Bach. The sets are: The Well-Tempered Clavier, Volume I, by Johann Sebastian Bach (24 MIDI files); The Well-Tempered Clavier (Part II), by Johann Sebastian Bach (24 MIDI files); Preludes Op.28, by Frédéric Chopin (24 midi files); 4 of the 24 preludes from Op.11, by Alexander Scriabin (4 MIDI files); Preludes and Fugues Op.87, by Dmitri Shostakovich (48 MIDI files). In total, 124 MIDI files were used for testing the algorithm.\nEven if these MIDI files have not been explicitly annotated with their keys and modulations, the main key of each of the selected pieces has been clearly established by the composer in the original scores, meaning an evaluation process of the algorithm is possible at least against the main key of the musical piece.\nResults The best performance of the algorithm used a ratio of $\\alpha = 10$, the key-profiles from Temperley for major keys, and the key-profiles from Sapp for minor keys. With this configuration, the algorithm guessed correctly 103 out of 124 keys in the MIDI files from the dataset.\nThe worst performance of the algorithm used a ratio of $\\alpha = 2$, the key-profiles from Krumhansl and Kessler for major keys, and the key-profiles from Aarden and Essen for the minor keys. With this configuration, the algorithm guessed 49 out of 124 keys in the MIDI files from the dataset.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"8ae9f13c8a136a626242b01fb18ce6dc","permalink":"/reports/mcgill/mumt621/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reports/mcgill/mumt621/","section":"reports","summary":"A Hidden Markov Model (HMM) for retrieving the musical key of a MIDI file.\n","tags":null,"title":"MUMT 621: Hidden Markov Model for Symbolic Key Detection","type":"book"},{"authors":null,"categories":null,"content":"A short music-theoretical essay on Brahms Intermezzo Op.118 No.2\nAbstract During the course MUTH 251: Theory and Analysis 4, I wrote a short essay on Brahms Intermezzo Op.118 No.2.\nIntroduction The Intermezzo Op.118 No.2 in A Major is one of the six piano pieces published in the\u0026mdash;late work\u0026mdash;Op.118. The piece has a large ternary form, characteristic of slow movements, with a main theme that extends from the anacrusis before the first measure to measure 49, an interior theme in F# minor that extends from measure 49 to measure 73, and finally (after a brief retransition), a return of the main theme that concludes the piece from measures 76 to 116. The structure of the three larger sections consist, in all cases, of small ternary forms described throughout this essay.\nMain Theme: Exposition The piece starts with a simple and interesting motive in the upper voice, arguably the most important sonority of the intermezzo: A descending second from C# to B as an anacrusis of eighth notes, followed by an ascending third that culminates in a D half note at the beginning of measure 1. The pattern is repeated in the third beat of measure 1, this time replacing the ascending third with an\u0026mdash;unusual\u0026mdash;ascending seventh going to an A one line above the treble staff, at the beginning of measure 2.\nThese first two measures already introduced a lot of the material that will be used throughout the piece, namely, the descending seconds, the metric structure (which for now, remains accentuated on the first beat of the measure, as it is notated, but will change constantly throughout the piece), and the ascending seventh.\nAfter the important motivic material from the beginning of the piece to the first two beats of measure 2, which I denominated Motive A, follows another motive, which will be particularly important in its rhythmic structure rather than its intervallic configuration, a dotted eight followed by a sixteenth note. In the context of its first appearance, this motive, which I denominated Motive X, is presented in two instances, first, in a pre-dominant harmony at the third beat of measure 2 and then a dominant seventh harmony at the beginning of measure 3.\nAs the piece continues, it will feel as if this Motive X has been introduced by Brahms with the purpose of changing the pulse of the music at pleasure. Particularly, when it is presented with an augmentation of the rhythmic figure. Two pairs of descending seconds at measures 3 and 4 complement Motive X before Motive A is reintroduced at the end of measure 4.\nMain Theme: Contrasting Middle The harmonic material of the measures comprehending the beginning of the piece (i.e., 1-16) comply with the Exposition section of a small ternary form, ending with a PAC in the dominant (E Major) at measure 16. Following the closing PAC of the Exposition, starts the Contrasting Middle section of the Main Theme, at the third beat of measure 16. At this point, the notated meter and the experienced meter are in conflict as the third beat of measure 16 becomes the accentuated beat. In order to introduce the new meter, Brahms has made use of a more dense texture in the previous measure, particularly, a salient melodic movement of a tritone within two eighth notes in the third beat of measure 15, which intensifies the role of the third beat that is ultimately necessary for transitioning to the contrasting middle section.\nThe contrasting middle comes with its own set of motivic materials on the upper voice, which will be recurrent through the rest of the piece: a figure of a “pedal” dominant (and later tonic) at the third beat, followed by a descending second at the beginning of the measure, appearing for the first time on measure 17 with the notes E, F#, E. The motive, which I called “Motive B”, then adds a leap of a fifth between the pedal note and the descending seconds in measure 18, turning into E, B, A.\nAt measure 20 (i.e., third beat of measure 19 and first two beats of measure 20), the pedal at the beginning of the motive has moved to the tonic. First, replicating the intervallic relationships at the beginning of the contrasting middle with A, B, A (i.e., a pedal, an ascending second, and a descending second). However, the ascending second between the pedal and the second note of the motive is replaced by an ascending third in measure 22 (A, C, A), a configuration that did not appear in the pedal dominant.\nBy the time we arrive to measure 23 and 24, the almost infallible bass on the third beat of each measure of the contrasting middle has been removed, and with it, the experienced meter has again been compromised. Brahms clearly establishes the experienced meter at the beginning of measure 25, in accordance with the notated meter. This measure also signals the beginning of a sequential passage (measures 25-28, plus the resolution on the subdominant of measure 29) that concludes the contrasting middle of the Main Theme and moves into the Recapitulation.\nMain Theme: Recapitulation Brahms “sneaks” an off-beat descending second at the second half of measure 29, that, together with the leap of a seventh above at measure 30, confirms the return of Motive A, or at least of its second half. What follows next seems to be a combination of the descending seconds accompanying Motive X at the Exposition of the Main Theme and the descending eighth notes that initiate Motive A. This hybrid motive makes up for the first quarter of the Recapitulation (measures 30-34).\nA very interesting inversion of Motive A follows next, at the third beat of measure 35. The rhythmic values of Motive A are respected and the general intervals inverted: an ascending second in eighth notes followed by a descending third (third beat of measure 34 to first beat of measure 35), and then, the same ascending second followed by a descending seventh (end of measure 35 to measure 36). Motive X also comes back in two instances, this time accompanied by a denser succession of eighth notes (measure 37).\nBrahms, yet another time, overrides the experienced meter at the end of measure 38 and brings, unexpectedly, the motive of the contrasting middle (i.e., Motive B) to the Recapitulation. The version of Motive B has the tonic as the pedal, however, it preserves the same intervals presented originally at the dominant pedal during the Contrasting Middle.\nDuring measure 41, something remarkable happens, a variation of the rhythmic Motive X is presented (augmentation with a dotted quarter and an eighth note), which helps to override the experienced meter at the beginning of measure 42, in accordance to the notated meter. Brahms quickly departs from the new meter once more, at the end of measure 42, establishing again the third beat as the accentuated beat. The same play on the experienced meter repeats at measure 46, however, even though the rhythmic circumstances are analogous, this time, the meter cannot be reinterpreted at the third beat due to a surprising factor, Brahms has brought Motive A to the voice of the contralto. Motive A is anacrusic and we have listened to it several times, it becomes evident whenever it returns, and now it has come back.\nThe experienced meter is preserved as strong on the first beat of measure 47, and as we might expect from feeling those two eighth notes as an anacrusis to the rest of Motive A, it continues into measure 48. This last measure also signals the end of the Recapitulation and the Main Theme of the Intermezzo.\nBy the end of the Main Theme, Brahms has taught us two important lessons:\n  The absolute importance of Motive A. Motive A, which had been used mostly in the context of a sub-dominant harmony, is now concluding the PAC of the Main Theme. That big leap of a seventh could actually be the closing Tonic of the piece (and when we reach the end of the piece, we confirm that this is the case).\n  Experienced meter is crucial in this piece. Motive A is anacrusic, containing two eighth notes on the third beat before the accentuated half note. Motive B, on the other hand, is not anacrusic and, when introduced, is usually started on the third beat of the measure. This dual role of the third beat of being an anacrusis or the strongest beat is going to be (frequently) exploited by Brahms to move seamlessly through different experienced meters. Additionally, a dual role of the second beat is also going to be introduced in the Interior Theme.\n  Interior Theme: Exposition If I had to extend on what Brahms meant with the in tempo marking at the beginning of the exposition of the interior theme (measure 49), I would write: “Here, in measures 49-56, expression is achieved through accentuation and not through tempo rubato”.\nBrahms has already presented us the resources needed to move the experienced meter of the music during the Main Theme. Now, it is time to put it in practice.\nThe Interior Theme follows the convention of modal mixture, it starts with F# minor. The experienced meter is in congruence with the notated meter. The motivic material does not resemble neither Motive A nor Motive B.\nRight from the beginning, we are exposed to accompanying triplets in the bass and a melodic line in the upper voice. Until measure 51, the upper voice suggests the continuation of the metric stress on the first beat of each measure, then, a change in the rhythmic pattern at measure 52 strengthens the second beat and its descending figure of step and thirds. This metric stress of the second beat is confirmed on measure 53, however, it is quickly corrected on measure 54 and until the end of the Exposition.\nInterior Theme: Contrasting Middle The contrasting middle of the Interior Theme starts right after the repetition bar, at measure 57. The texture of this section is mostly homorhythmic-homophonic, in a choral style. The key features a modal mixture of F# Major, contrasting with the F# minor of the Exposition.\nMore importantly, the experienced meter of this section changes abruptly to a 2/4 meter, accentuating the second beat of measure 57 and continuing with an experienced 2/4 meter until the cadential six-four chord at measure 64. The contrasting middle concludes with a C# dominant seventh chord that brings back the theme of the Exposition, this time in the Recapitulation.\nInterior Theme: Recapitulation In measure 65, Motive C of the interior theme comes back. This time, the melodic line is not presented in the upper voice but alternating between the register of the tenor and the contralto. One substantial difference to the Exposition is that the play of modifying the experienced meter is absent. Brahms begins the rhythmic pattern to stress the second beat of measure 68 but abruptly replaces the culmination of that pattern with a quarter note rest at the beginning of measure 69.\nThe texture of the Recapitulation feels more based on counterpoint than the Exposition did. The experienced meter is kept in accordance to the notated meter and the PAC finally comes at measure 73, closing with the F# minor tonic.\nReturn of the Main Theme After the resolution of the PAC of the interior theme, a small retransition that continues with the triplet figures, extending from measures 73 to 76, helps to connect the Interior Theme with the return of the Main Theme.\nDuring the Exposition, the texture of the upper voice is denser, particularly where the Motive X is reintroduced. The Contrasting Middle returns in the third beat of measure 84. Just as it did during the Main Theme at the beginning, the Recapitulation is left intact, combining motivic material from Motive A and Motive B. The leap of the seventh, so salient at the beginning of the piece, now blends into the arpeggiated tonic triad, during the PAC that closes this beautiful Intermezzo.\nFigures  Motive A.   Motive B. During the Intermezzo, the first note is always played on the third beat of the measure, however, the accentuation is the one suggested in this figure.   Motive C. During the Recapitulation of the Interior Theme, the second and third measures of this Figure (not counting the anacrusis) change slightly, however, I have considered that the motive in the Exposition and the Recapitulation are the same motive. ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643259933,"objectID":"8afb142e72d51eedbebfb8863cb753dd","permalink":"/reports/mcgill/muth251/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/reports/mcgill/muth251/","section":"reports","summary":"A short music-theoretical essay on Brahms Intermezzo Op.118 No.2\n","tags":null,"title":"MUTH 251: Essay on Brahms Intermezzo Op.118 No.2","type":"book"}]